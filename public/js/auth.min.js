/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./Modules/Frontend/Resources/assets/js/auth.js":
/*!******************************************************!*\
  !*** ./Modules/Frontend/Resources/assets/js/auth.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2); } }, _regeneratorDefine2(e, r, n, t); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// ==========================\n// Password toggle handlers\n// ==========================\nvar togglePasswordVisibility = function togglePasswordVisibility(toggleId, inputId) {\n  var toggle = document.querySelector(\"#\".concat(toggleId));\n  var input = document.querySelector(\"#\".concat(inputId));\n  if (toggle && input) {\n    toggle.addEventListener('click', function () {\n      var type = input.getAttribute('type') === 'password' ? 'text' : 'password';\n      input.setAttribute('type', type);\n      this.classList.toggle('fa-eye-slash');\n    });\n  }\n};\ntogglePasswordVisibility('togglePassword', 'password');\ntogglePasswordVisibility('toggleConfirmPassword', 'confirm_password');\n\n// ==========================\n// Helpers\n// ==========================\nfunction validateEmail(email) {\n  var re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return re.test(email);\n}\nfunction showValidationError(input, message) {\n  var container = input.closest('.input-group');\n  var errorFeedback = container.querySelector('.invalid-feedback');\n  if (errorFeedback) {\n    errorFeedback.textContent = message;\n    input.classList.add('is-invalid');\n  }\n}\nfunction clearValidationError(input) {\n  var container = input.closest('.input-group');\n  var errorFeedback = container.querySelector('.invalid-feedback');\n  if (errorFeedback) {\n    errorFeedback.textContent = '';\n    input.classList.remove('is-invalid');\n  }\n}\nfunction toggleButton(isSubmitting, button, submittingText, defaultText) {\n  button.textContent = isSubmitting ? submittingText : defaultText;\n  button.disabled = isSubmitting;\n}\nfunction attachLiveInputClear(form, fields) {\n  fields.forEach(function (fieldName) {\n    var input = form.querySelector(\"input[name=\\\"\".concat(fieldName, \"\\\"]\"));\n    if (input) {\n      input.addEventListener('input', function () {\n        return clearValidationError(input);\n      });\n    }\n  });\n}\n\n// ==========================\n// Register Form\n// ==========================\nvar registerForm = document.querySelector('#registerForm');\nif (registerForm) {\n  var validateRegisterForm = function validateRegisterForm() {\n    var isValid = true;\n    var firstName = registerForm.querySelector('input[name=\"first_name\"]');\n    var lastName = registerForm.querySelector('input[name=\"last_name\"]');\n    var email = registerForm.querySelector('input[name=\"email\"]');\n    var password = registerForm.querySelector('input[name=\"password\"]');\n    var confirmPassword = registerForm.querySelector('input[name=\"confirm_password\"]');\n    if (!firstName.value.trim()) {\n      showValidationError(firstName, 'First Name field is required.');\n      isValid = false;\n    }\n    if (!lastName.value.trim()) {\n      showValidationError(lastName, 'Last Name field is required.');\n      isValid = false;\n    }\n    if (!email.value.trim()) {\n      showValidationError(email, 'Email field is required.');\n      isValid = false;\n    } else if (!validateEmail(email.value)) {\n      showValidationError(email, 'Enter a valid Email Address.');\n      isValid = false;\n    }\n    if (!password.value.trim()) {\n      showValidationError(password, 'Password field is required.');\n      isValid = false;\n    } else if (password.value.length < 8) {\n      showValidationError(password, 'Password must be at least 8 characters long.');\n      isValid = false;\n    }\n    if (password.value !== confirmPassword.value) {\n      showValidationError(confirmPassword, 'Passwords and confirm password do not match.');\n      isValid = false;\n    }\n    return isValid;\n  };\n  var registerButton = document.querySelector('#register-button');\n  var errorMessage = document.querySelector('#error_message');\n  var baseUrl = document.querySelector('meta[name=\"base-url\"]').getAttribute('content');\n  var firstNameInput = registerForm.querySelector('input[name=\"first_name\"]');\n  var lastNameInput = registerForm.querySelector('input[name=\"last_name\"]');\n\n  // Prevent numbers in first name and last name + immediate error + auto-remove numbers\n  [firstNameInput, lastNameInput].forEach(function (input) {\n    input.addEventListener('input', function () {\n      var numberPattern = /[0-9]/g;\n      if (numberPattern.test(input.value)) {\n        input.value = input.value.replace(numberPattern, '');\n        showValidationError(input, 'Name field does not allow numbers.');\n      } else if (!input.value.trim()) {\n        showValidationError(input, 'This field is required.');\n      } else {\n        clearValidationError(input);\n      }\n    });\n  });\n  attachLiveInputClear(registerForm, ['first_name', 'last_name', 'email', 'password', 'confirm_password']);\n  registerForm.addEventListener('submit', /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(e) {\n      var formData, response, data, message, loginResponse, loginData, _t;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            e.preventDefault();\n            if (validateRegisterForm()) {\n              _context.n = 1;\n              break;\n            }\n            return _context.a(2);\n          case 1:\n            toggleButton(true, registerButton, 'Signing Up...', 'Sign Up');\n            errorMessage.textContent = '';\n            _context.p = 2;\n            formData = new FormData(this);\n            _context.n = 3;\n            return fetch(\"\".concat(baseUrl, \"/api/register?is_ajax=1\"), {\n              method: 'POST',\n              headers: {\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              },\n              body: formData\n            });\n          case 3:\n            response = _context.v;\n            _context.n = 4;\n            return response.json();\n          case 4:\n            data = _context.v;\n            if (!(!response.ok || !data.status)) {\n              _context.n = 5;\n              break;\n            }\n            message = data.errors ? Object.values(data.errors).flat()[0] : data.message || 'An error occurred during registration';\n            errorMessage.textContent = message;\n            return _context.a(2);\n          case 5:\n            _context.n = 6;\n            return fetch(\"\".concat(baseUrl, \"/api/login?is_ajax=1\"), {\n              method: 'POST',\n              headers: {\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              },\n              body: formData\n            });\n          case 6:\n            loginResponse = _context.v;\n            _context.n = 7;\n            return loginResponse.json();\n          case 7:\n            loginData = _context.v;\n            if (loginData.status === true) {\n              window.location.href = \"\".concat(baseUrl);\n            } else {\n              errorMessage.textContent = loginData.message || 'Login after registration failed.';\n            }\n            _context.n = 9;\n            break;\n          case 8:\n            _context.p = 8;\n            _t = _context.v;\n            console.error('Registration error:', _t);\n            errorMessage.textContent = 'A system error occurred. Please try again later.';\n          case 9:\n            _context.p = 9;\n            toggleButton(false, registerButton, '', 'Sign Up');\n            return _context.f(9);\n          case 10:\n            return _context.a(2);\n        }\n      }, _callee, this, [[2, 8, 9, 10]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\n\n// ==========================\n// Login Form\n// ==========================\nvar loginForm = document.querySelector('#login-form');\nif (loginForm) {\n  var validateLoginForm = function validateLoginForm() {\n    var isValid = true;\n    var email = loginForm.querySelector('input[name=\"email\"]');\n    var password = loginForm.querySelector('input[name=\"password\"]');\n    if (!email.value.trim()) {\n      showValidationError(email, 'Email field is required.');\n      isValid = false;\n    } else if (!validateEmail(email.value)) {\n      showValidationError(email, 'Enter a valid Email Address.');\n      isValid = false;\n    }\n    if (!password.value.trim()) {\n      showValidationError(password, 'Password field is required.');\n      isValid = false;\n    }\n    return isValid;\n  };\n  var loginButton = document.querySelector('#login-button');\n  var loginError = document.querySelector('#login_error_message');\n  var _baseUrl = document.querySelector('meta[name=\"base-url\"]').getAttribute('content');\n  attachLiveInputClear(loginForm, ['email', 'password']);\n  loginForm.addEventListener('submit', /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(e) {\n      var formData, response, data, message, _t2;\n      return _regenerator().w(function (_context2) {\n        while (1) switch (_context2.n) {\n          case 0:\n            e.preventDefault();\n            if (validateLoginForm()) {\n              _context2.n = 1;\n              break;\n            }\n            return _context2.a(2);\n          case 1:\n            toggleButton(true, loginButton, 'Signing In...', 'Sign In');\n            loginError.textContent = '';\n            _context2.p = 2;\n            formData = new FormData(this);\n            _context2.n = 3;\n            return fetch(\"\".concat(_baseUrl, \"/api/login?is_ajax=1\"), {\n              method: 'POST',\n              headers: {\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              },\n              body: formData\n            });\n          case 3:\n            response = _context2.v;\n            _context2.n = 4;\n            return response.json();\n          case 4:\n            data = _context2.v;\n            if (!(!response.ok || !data.status)) {\n              _context2.n = 5;\n              break;\n            }\n            message = data.errors ? Object.values(data.errors).flat()[0] : data.message || 'Login failed';\n            loginError.textContent = message;\n            return _context2.a(2);\n          case 5:\n            if (!data.device_limit_reached) {\n              _context2.n = 6;\n              break;\n            }\n            loginError.textContent = \"Your device limit has been reached.\";\n            return _context2.a(2);\n          case 6:\n            window.location.href = \"\".concat(_baseUrl);\n            _context2.n = 8;\n            break;\n          case 7:\n            _context2.p = 7;\n            _t2 = _context2.v;\n            console.error('Login error:', _t2);\n            loginError.textContent = 'A system error occurred. Please try again later.';\n          case 8:\n            _context2.p = 8;\n            toggleButton(false, loginButton, '', 'Sign In');\n            return _context2.f(8);\n          case 9:\n            return _context2.a(2);\n        }\n      }, _callee2, this, [[2, 7, 8, 9]]);\n    }));\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n}\n\n// ==========================\n// Forgot Password Form\n// ==========================\nvar forgetPasswordForm = document.querySelector('#forgetpassword-form');\nif (forgetPasswordForm) {\n  var validateForgetPasswordForm = function validateForgetPasswordForm() {\n    var isValid = true;\n    var email = forgetPasswordForm.querySelector('input[name=\"email\"]');\n    if (!email.value.trim()) {\n      showValidationError(email, 'Email field is required.');\n      isValid = false;\n    } else if (!validateEmail(email.value)) {\n      showValidationError(email, 'Enter a valid Email Address.');\n      isValid = false;\n    }\n    return isValid;\n  };\n  var forgetPasswordButton = document.querySelector('#forget_password_btn');\n  var forgetPasswordError = document.querySelector('#forgetpassword_error_message');\n  var forgetPasswordMessage = document.querySelector('#forget_password_msg');\n  var _baseUrl2 = document.querySelector('meta[name=\"base-url\"]').getAttribute('content');\n  attachLiveInputClear(forgetPasswordForm, ['email']);\n  forgetPasswordForm.addEventListener('submit', /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(e) {\n      var formData, response, data, message, _t3;\n      return _regenerator().w(function (_context3) {\n        while (1) switch (_context3.n) {\n          case 0:\n            e.preventDefault();\n            if (validateForgetPasswordForm()) {\n              _context3.n = 1;\n              break;\n            }\n            return _context3.a(2);\n          case 1:\n            toggleButton(true, forgetPasswordButton, 'Sending...', 'Submit');\n            forgetPasswordError.textContent = '';\n            forgetPasswordMessage.classList.add('d-none');\n            _context3.p = 2;\n            formData = new FormData(this);\n            _context3.n = 3;\n            return fetch(\"\".concat(_baseUrl2, \"/api/forgot-password?is_ajax=1\"), {\n              method: 'POST',\n              headers: {\n                'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              },\n              body: formData\n            });\n          case 3:\n            response = _context3.v;\n            _context3.n = 4;\n            return response.json();\n          case 4:\n            data = _context3.v;\n            if (!(!response.ok || !data.status)) {\n              _context3.n = 5;\n              break;\n            }\n            message = data.errors ? Object.values(data.errors).flat()[0] : data.message || 'Password reset failed';\n            forgetPasswordError.textContent = message;\n            return _context3.a(2);\n          case 5:\n            forgetPasswordMessage.classList.remove('d-none');\n            forgetPasswordForm.reset();\n            _context3.n = 7;\n            break;\n          case 6:\n            _context3.p = 6;\n            _t3 = _context3.v;\n            console.error('Forgot password error:', _t3);\n            forgetPasswordError.textContent = 'A system error occurred. Please try again later.';\n          case 7:\n            _context3.p = 7;\n            toggleButton(false, forgetPasswordButton, '', 'Submit');\n            return _context3.f(7);\n          case 8:\n            return _context3.a(2);\n        }\n      }, _callee3, this, [[2, 6, 7, 8]]);\n    }));\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Modules/Frontend/Resources/assets/js/auth.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./Modules/Frontend/Resources/assets/js/auth.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;