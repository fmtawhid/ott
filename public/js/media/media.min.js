/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/media/media.js":
/*!*************************************!*\
  !*** ./resources/js/media/media.js ***!
  \*************************************/
/***/ (() => {

eval("var baseUrl = document.querySelector('meta[name=\"base-url\"]').getAttribute('content');\nvar exampleModal = document.getElementById('exampleModal');\nvar mediaContainer = document.getElementById('media-container');\ndocument.addEventListener('DOMContentLoaded', function () {\n  var selectedMediaUrl = '';\n  var currentImageContainer = '';\n  var currentHiddenInput = '';\n  var videoInputCounter = 0; // Initialize a counter for dynamic IDs\n\n  function initializeImageSelection(button) {\n    button.addEventListener('click', function () {\n      currentImageContainer = this.getAttribute('data-image-container');\n      currentHiddenInput = this.getAttribute('data-hidden-input');\n    });\n  }\n  function initializeModal() {\n    document.querySelectorAll('button[data-bs-target=\"#exampleModal\"]').forEach(function (button) {\n      initializeImageSelection(button);\n    });\n  }\n  function selectMedia(mediaUrl, mediaElement) {\n    selectedMediaUrl = mediaUrl;\n\n    // Remove active class from all media elements\n    document.querySelectorAll('#mediaLibraryContent img, #mediaLibraryContent video').forEach(function (media) {\n      media.classList.remove('iq-image');\n    });\n\n    // Add active class to the selected media element\n    mediaElement.classList.add('iq-image');\n  }\n  if (document.getElementById('mediaLibraryContent')) {\n    document.getElementById('mediaLibraryContent').addEventListener('click', function (event) {\n      if (event.target.tagName === 'IMG') {\n        var mediaUrl = event.target.src;\n        selectMedia(mediaUrl, event.target);\n      } else if (event.target.tagName === 'VIDEO') {\n        var mediaUrl = event.target.querySelector('source').src;\n        //   var mediaUrl = event.target.src;\n        if (mediaUrl) {\n          selectMedia(mediaUrl, event.target);\n        }\n        event.preventDefault();\n      }\n    });\n  }\n  if (document.getElementById('mediaSubmitButton')) {\n    document.getElementById('mediaSubmitButton').addEventListener('click', function () {\n      if (selectedMediaUrl && currentImageContainer && currentHiddenInput) {\n        var selectedImageContainer = document.getElementById(currentImageContainer);\n        var mediaUrlInput = document.getElementById(currentHiddenInput);\n        if (selectedImageContainer) {\n          mediaUrlInput.value = selectedMediaUrl;\n          selectedImageContainer.innerHTML = '';\n\n          // Check if there's an element with id iq-video-quality\n\n          if (mediaUrlInput.hasAttribute('data-validation')) {\n            var fileError = document.getElementById('file-error');\n            var videofile = document.querySelector('input[name=\"video_file_input\"]');\n            var vfi = document.querySelector('input[name=\"image_input4\"]');\n            // Only allow video selection\n            if (selectedMediaUrl.endsWith('.mp4') || selectedMediaUrl.endsWith('.avi')) {\n              if (fileError) {\n                fileError.style.display = 'none';\n              }\n              if (videofile) {\n                videofile.removeAttribute('required');\n              }\n              var video = document.createElement('video');\n              video.src = selectedMediaUrl;\n              video.controls = true;\n              video.classList.add('img-fluid', 'mb-2');\n              video.style.maxWidth = '300px';\n              video.style.maxHeight = '300px';\n              selectedImageContainer.appendChild(video);\n              var crossIcon = document.createElement('span');\n              crossIcon.innerHTML = '&times;';\n              crossIcon.classList.add('remove-media-icon');\n              crossIcon.style.cursor = 'pointer';\n              crossIcon.style.fontSize = '24px';\n              crossIcon.style.position = 'absolute';\n              crossIcon.addEventListener('click', function () {\n                selectedImageContainer.innerHTML = '';\n                mediaUrlInput.value = '';\n                if (videofile) {\n                  videofile.value = '';\n                }\n                if (vfi) {\n                  vfi.setAttribute('required', 'required');\n                }\n                if (fileError) {\n                  fileError.style.display = 'block';\n                }\n              });\n              if (vfi) {\n                vfi.removeAttribute('required');\n              }\n              selectedImageContainer.appendChild(crossIcon);\n            } else {\n              if (videofile) {\n                videofile.setAttribute('required', 'required');\n              }\n              if (fileError) {\n                fileError.style.display = 'block';\n              }\n\n              // Show error for incorrect media type\n              var errorElement = document.createElement('div');\n              errorElement.classList.add('text-danger');\n              errorElement.textContent = 'Only video files are allowed.';\n              selectedImageContainer.appendChild(errorElement);\n            }\n          } else {\n            if (selectedMediaUrl.endsWith('.png') || selectedMediaUrl.endsWith('.jpg') || selectedMediaUrl.endsWith('.jpeg') || selectedMediaUrl.endsWith('.webp')) {\n              // For other cases, default behavior (assuming image upload or other media)\n              var img = document.createElement('img');\n              img.src = selectedMediaUrl;\n              img.classList.add('img-fluid', 'mb-2');\n              img.style.maxWidth = '100px';\n              img.style.maxHeight = '100px';\n              selectedImageContainer.appendChild(img);\n              var crossIcon = document.createElement('span');\n              crossIcon.innerHTML = '&times;';\n              crossIcon.classList.add('remove-media-icon');\n              crossIcon.style.cursor = 'pointer';\n              crossIcon.style.fontSize = '24px';\n              crossIcon.addEventListener('click', function () {\n                selectedImageContainer.innerHTML = '';\n                mediaUrlInput.value = '';\n              });\n              selectedImageContainer.appendChild(crossIcon);\n            } else {\n              var errorElement = document.createElement('div');\n              errorElement.classList.add('text-danger');\n              errorElement.textContent = 'Only image files are allowed.';\n              selectedImageContainer.appendChild(errorElement);\n              var buttonElements = document.querySelectorAll('.input-group-text.form-control');\n              buttonElements.forEach(function (buttonElement) {\n                if (buttonElement) {\n                  buttonElement.innerHTML = '';\n                }\n              });\n            }\n          }\n          $('#exampleModal').modal('hide');\n        }\n      }\n    });\n  }\n  if (document.getElementById('submitButton')) {\n    var submitButton = document.getElementById('submitButton');\n    document.getElementById('submitButton').addEventListener('click', function (event) {\n      var mediaContainerdata = document.getElementById('media-container');\n      event.preventDefault(); // Prevent the default form submission\n\n      submitButton.disabled = true;\n      window.uploadedFiles = window.uploadedFiles || [];\n      var formData = new FormData();\n      var remainingFiles = window.uploadedFiles.filter(function (file) {\n        return !file.removed;\n      });\n      if (remainingFiles.length > 0) {\n        document.getElementById('file_url_media').removeAttribute('required');\n        document.getElementById('file_url_media-error').style.display = 'none';\n        for (var i = 0; i < remainingFiles.length; i++) {\n          formData.append('file_url[]', remainingFiles[i].file);\n        }\n\n        // Submit the form with remaining files\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST', \"\".concat(baseUrl, \"/app/media-library/store\"), true);\n        xhr.setRequestHeader('X-CSRF-TOKEN', document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')); // Set CSRF token header\n        xhr.onloadstart = function () {\n          submitButton.innerText = 'Loading...';\n        };\n        xhr.onload = function () {\n          if (xhr.status === 200) {\n            window.uploadedFiles = [];\n            // Trigger the media library tab to refresh\n            document.getElementById('nav-media-library-tab').click();\n            var _mediaContainer = document.getElementById('media-container');\n            page = 1; // Reset the page to 1\n            _mediaContainer.innerHTML = ''; // Clear the container to load fresh content\n\n            submitButton.disabled = false;\n            loadPaginatedImages(); // Call the pagination function\n\n            // Add the scroll event listener after the initial load\n            mediaLibraryContent.addEventListener('scroll', handleScroll);\n            var uploadedImagesCont = document.getElementById('uploadedImages');\n            uploadedImagesCont.innerHTML = '';\n          }\n        };\n        xhr.onloadend = function () {\n          submitButton.innerText = 'Save';\n        };\n        submitButton.disabled = false;\n        xhr.send(formData);\n      } else {\n        document.getElementById('file_url_media').setAttribute('required', 'required');\n        document.getElementById('file_url_media-error').style.display = 'block';\n        submitButton.innerText = 'Save';\n      }\n      submitButton.disabled = false;\n      if (window.location.href === \"\".concat(baseUrl, \"/app/media-library\")) {\n        window.location.reload();\n      }\n    });\n  }\n  function loadPaginatedImages() {\n    var mediaContainer = document.getElementById('media-container');\n    var loadingSpinner = document.getElementById('loading-spinner');\n    var mediaLibraryContent = document.getElementById('mediaLibraryContent');\n    var perPage = 21; // Number of images per page (adjust as needed)\n\n    var isLoading = false;\n    var hasMore = true;\n    if (isLoading || !hasMore) return; // Prevent duplicate loads\n\n    isLoading = true; // Set loading to true\n    fetch(\"\".concat(baseUrl, \"/app/media-library/getMediaStore?page=\").concat(page, \"&perPage=\").concat(perPage)).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      if (data.html) {\n        if (page === 1) {\n          mediaContainer.innerHTML = ''; // Clear existing content only on the first page load\n        }\n        mediaContainer.insertAdjacentHTML('beforeend', data.html);\n        if (data.hasMore) {\n          page++; // Increment page number if more images are available\n        } else {\n          hasMore = false; // Set hasMore to false if no more images\n        }\n      } else {\n        console.log(\"No data received\");\n      }\n    })[\"catch\"](function (error) {\n      return console.error('Error:', error);\n    })[\"finally\"](function () {\n      isLoading = false; // Reset loading status after the fetch completes\n    });\n  }\n\n  // Scroll event handler to trigger loading more images\n  function handleScroll() {\n    // Check if the user has scrolled to the bottom of the mediaLibraryContent container\n    if (mediaLibraryContent.scrollTop + mediaLibraryContent.clientHeight >= mediaLibraryContent.scrollHeight - 100) {\n      loadPaginatedImages(); // Load more images when the user scrolls to the bottom\n    }\n  }\n  if (exampleModal) {\n    exampleModal.addEventListener('hidden.bs.modal', function () {\n      mediaLibraryContent.removeEventListener('scroll', handleScroll);\n    });\n  }\n  function handleVideoQualityTypeChange(section) {\n    section.find('.video_quality_type').on('change', function () {\n      var selectedType = $(this).val();\n      var QualityVideoFileInput = section.find('.quality_video_file_input');\n      var QualityVideoURLInput = section.find('.quality_video_input');\n      var qualityVideoInput = section.find('input[name=\"quality_video[]\"]');\n      var qualityVideoURLInput = section.find('input[name=\"quality_video_url_input[]\"]');\n      if (selectedType === 'Local') {\n        QualityVideoFileInput.removeClass('d-none');\n        QualityVideoURLInput.addClass('d-none');\n        qualityVideoInput.val(qualityVideoInput.val()).trigger('change');\n        qualityVideoURLInput.val('').trigger('change');\n      } else {\n        QualityVideoFileInput.addClass('d-none');\n        QualityVideoURLInput.removeClass('d-none');\n        qualityVideoURLInput.val(qualityVideoURLInput.val()).trigger('change');\n        qualityVideoInput.val('').trigger('change');\n      }\n    }).trigger('change');\n  }\n  function destroySelect2(section) {\n    section.find('select.select2').each(function () {\n      if ($(this).data('select2')) {\n        $(this).select2('destroy');\n      }\n    });\n  }\n  function initializeSelect2(section) {\n    section.find('select.select2').each(function () {\n      $(this).select2({\n        width: '100%'\n      });\n    });\n  }\n  function initializeFormState() {\n    // Handle the initial visibility of input fields based on current values\n    $('.video-inputs-container').each(function () {\n      handleVideoQualityTypeChange($(this));\n    });\n  }\n  $('#add_more_video').click(function () {\n    var originalSection = $('.video-inputs-container').first();\n    destroySelect2(originalSection);\n    var newSection = originalSection.clone();\n    videoInputCounter++; // Increment the counter\n\n    newSection.find('input, select').each(function () {\n      var idAttr = $(this).attr('id');\n      if (idAttr) {\n        $(this).attr('id', idAttr + videoInputCounter);\n      }\n      var nameAttr = $(this).attr('name');\n      if (nameAttr) {\n        $(this).attr('name', nameAttr + videoInputCounter);\n      }\n      $(this).val('').trigger('change');\n    });\n    newSection.find('.remove-video-input').removeClass('d-none');\n    newSection.find('[data-image-container]').each(function () {\n      var dataAttr = $(this).attr('data-image-container');\n      $(this).attr('data-image-container', dataAttr + videoInputCounter);\n    });\n    newSection.find('[data-hidden-input]').each(function () {\n      var dataAttr = $(this).attr('data-hidden-input');\n      $(this).attr('data-hidden-input', dataAttr + videoInputCounter);\n    });\n    newSection.find('.img-fluid').remove();\n    newSection.find('.remove-media-icon').remove();\n    newSection.find('input[type=\"hidden\"]').val('');\n    newSection.find('div[id]').each(function () {\n      var idAttr = $(this).attr('id');\n      if (idAttr) {\n        $(this).attr('id', idAttr + videoInputCounter);\n      }\n    });\n    $('#video-inputs-container-parent').append(newSection);\n    initializeSelect2(newSection);\n    handleVideoQualityTypeChange(newSection);\n    initializeModal();\n    initializeSelect2(originalSection);\n  });\n  $(document).on('click', '.remove-video-input', function () {\n    $(this).closest('.video-inputs-container').remove();\n  });\n  initializeFormState();\n  initializeModal();\n  initializeSelect2($(document));\n});\nif (document.getElementById('file_url_media')) {\n  document.getElementById('file_url_media').addEventListener('change', function () {\n    var fileInput = document.getElementById('file_url_media');\n    var uploadedImagesContainer = document.getElementById('uploadedImages');\n    var chunkSize = 1024 * 1024 * 30; // 100 MB chunk size (adjust as necessary)\n    var uploadedFiles = [];\n\n    // Clear previously uploaded images and reset progress\n    uploadedImagesContainer.innerHTML = '';\n    if (fileInput.files.length > 0) {\n      for (var i = 0; i < fileInput.files.length; i++) {\n        var file = fileInput.files[i];\n        var start = 0;\n        var end = Math.min(chunkSize, file.size);\n        var index = 0;\n        if (file.type.startsWith('video/')) {\n          var video = document.createElement('video');\n          video.src = URL.createObjectURL(file);\n          video.currentTime = 1; // Capture frame at 1 second\n\n          video.addEventListener('loadeddata', function () {\n            var canvas = document.createElement('canvas');\n            canvas.width = video.videoWidth;\n            canvas.height = video.videoHeight;\n            var ctx = canvas.getContext('2d');\n            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n            var img = document.createElement('img');\n            img.src = canvas.toDataURL('image/jpeg');\n            img.classList.add('img-fluid', 'iq-uploaded-image');\n            img.style.width = '150px'; // Adjust size as needed\n            img.style.height = '100px';\n\n            // Create progress bar\n            var progressBar = document.createElement('div');\n            progressBar.classList.add('progress', 'mb-3', 'iq-progress');\n            progressBar.style.visibility = 'hidden'; // Change visibility to hidden initially\n            progressBar.innerHTML = \"\\n                            <div class=\\\"progress-bar\\\" role=\\\"progressbar\\\" style=\\\"width: 0%;\\\" aria-valuenow=\\\"0\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\"></div>\\n                        \";\n\n            // Create close icon\n            var closeButton = document.createElement('div');\n            closeButton.classList.add('iq-uploaded-image-close');\n            closeButton.innerHTML = '&times;';\n            closeButton.addEventListener('click', function () {\n              uploadedFiles[index].removed = true; // Mark file as removed\n              this.parentNode.remove(); // Remove image on close icon click\n              checkAndClearFileInput();\n            });\n\n            // Append image, progress bar, and close icon\n            var imageContainer = document.createElement('div');\n            imageContainer.classList.add('iq-uploaded-image-container');\n            imageContainer.appendChild(img);\n            imageContainer.appendChild(progressBar);\n            imageContainer.appendChild(closeButton);\n            uploadedImagesContainer.appendChild(imageContainer);\n\n            // Track the uploaded file\n            uploadedFiles.push({\n              file: file,\n              removed: false,\n              progressBar: progressBar.querySelector('.progress-bar')\n            });\n            uploadChunk(file, index, start, end, chunkSize, uploadedFiles, progressBar); // Pass progressBar to uploadChunk\n          });\n        } else {\n          var reader = new FileReader();\n          reader.onload = function (file, index) {\n            return function (e) {\n              var img = document.createElement('img');\n              img.src = e.target.result;\n              img.classList.add('img-fluid', 'iq-uploaded-image');\n              img.style.width = '150px'; // Adjust size as needed\n              img.style.height = '100px';\n\n              // Create progress bar\n              var progressBar = document.createElement('div');\n              progressBar.classList.add('progress', 'my-3', 'iq-progress');\n              progressBar.style.visibility = 'hidden'; // Change visibility to hidden initially\n              progressBar.innerHTML = \"\\n                                <div class=\\\"progress-bar\\\" role=\\\"progressbar\\\" style=\\\"width: 0%;\\\" aria-valuenow=\\\"0\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\"></div>\\n                            \";\n\n              // Create close icon\n              var closeButton = document.createElement('div');\n              closeButton.classList.add('iq-uploaded-image-close');\n              closeButton.innerHTML = '&times;';\n              closeButton.addEventListener('click', function () {\n                uploadedFiles[index].removed = true; // Mark file as removed\n                this.parentNode.remove(); // Remove image on close icon click\n                checkAndClearFileInput();\n              });\n\n              // Append image, progress bar, and close icon\n              var imageContainer = document.createElement('div');\n              imageContainer.classList.add('iq-uploaded-image-container');\n              imageContainer.appendChild(img);\n              imageContainer.appendChild(progressBar);\n              imageContainer.appendChild(closeButton);\n              uploadedImagesContainer.appendChild(imageContainer);\n\n              // Track the uploaded file\n              uploadedFiles.push({\n                file: file,\n                removed: false,\n                progressBar: progressBar.querySelector('.progress-bar')\n              });\n              uploadChunk(file, index, start, end, chunkSize, uploadedFiles, progressBar); // Pass progressBar to uploadChunk\n            };\n          }(file, i);\n          reader.readAsDataURL(file);\n        }\n      }\n    }\n\n    // Track the uploaded files globally\n    window.uploadedFiles = uploadedFiles;\n    function checkAndClearFileInput() {\n      // If all files are removed\n      if (uploadedFiles.every(function (file) {\n        return file.removed;\n      })) {\n        fileInput.value = null; // Clear the file input\n        uploadedFiles.length = 0; // Clear the uploadedFiles array\n        document.getElementById('file_url_media').setAttribute('required', 'required');\n        document.getElementById('file_url_media-error').style.display = 'block';\n      }\n    }\n  });\n}\nfunction uploadChunk(file, index, start, end, chunkSize, uploadedFiles, progressBar) {\n  // Added progressBar parameter\n  var chunk = file.slice(start, end);\n  var formData = new FormData();\n  formData.append('file_chunk', chunk);\n  formData.append('index', index);\n  formData.append('total_chunks', Math.ceil(file.size / chunkSize));\n  formData.append('file_name', file.name);\n\n  // AJAX request to upload chunk\n  var xhr = new XMLHttpRequest();\n\n  // Track upload progress\n  xhr.upload.addEventListener('progress', function (e) {\n    if (e.lengthComputable) {\n      var percentComplete = e.loaded / e.total * 100;\n      uploadedFiles[index].progressBar.style.width = percentComplete + '%';\n      progressBar.style.visibility = 'visible'; // Make progress bar visible during upload\n    }\n  });\n  xhr.open('POST', \"\".concat(baseUrl, \"/app/media-library/upload\"), true);\n  xhr.setRequestHeader('X-CSRF-TOKEN', document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')); // Set CSRF token header\n\n  xhr.onload = function () {\n    if (xhr.status === 200) {\n      var response = JSON.parse(xhr.responseText);\n      if (response.success) {\n        if (end < file.size) {\n          start = end;\n          end = Math.min(start + chunkSize, file.size);\n          uploadChunk(file, index, start, end, chunkSize, uploadedFiles, progressBar); // Pass progressBar to uploadChunk\n        } else {\n          uploadedFiles[index].progressBar.style.width = '100%';\n          progressBar.style.visibility = 'hidden'; // Hide progress bar after completion\n        }\n      }\n    }\n  };\n  xhr.send(formData);\n}\n\n/////////////////////////////////////////  set image /////////////////////////////////////////\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  // const mediaContainer = document.getElementById('media-container');\n  var loadingSpinner = document.getElementById('loading-spinner');\n  var mediaLibraryContent = document.getElementById('mediaLibraryContent');\n  var searchInput = document.getElementById('media-search');\n  var noData = document.getElementById('no_data');\n  var page = 1;\n  var isLoading = false;\n  var hasMore = true;\n  var searchQuery = ''; // Variable to store the search query\n  var issearch = 0; // Variable to hold the debounce timeout ID\n  var baseUrl = document.querySelector('meta[name=\"base-url\"]').getAttribute('content'); // Adjust if necessary\n  var noAvailableMessageShown = false; // Flag to prevent multiple \"No Available\" messages\n\n  function loadImages() {\n    var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    if (isLoading || !hasMore && query == '' && issearch == 0) return;\n    isLoading = true;\n    loadingSpinner.style.display = 'block';\n    fetch(\"\".concat(baseUrl, \"/app/media-library/getMediaStore?page=\").concat(page, \"&query=\").concat(encodeURIComponent(query))).then(function (response) {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(function (data) {\n      // clearNoAvailableMessage();\n\n      if (data.html) {\n        noData.classList.add('d-none');\n        if (issearch == 1) {\n          mediaContainer.innerHTML = '';\n        }\n        mediaContainer.insertAdjacentHTML('beforeend', data.html);\n        page++;\n        noAvailableMessageShown = false; // Reset flag if new images are loaded\n\n        issearch.value = 0;\n      } else {\n        issearch.value = 0;\n        mediaContainer.innerHTML = '';\n        noData.classList.remove('d-none');\n        $('#no_data').text('No data available');\n      }\n      hasMore = data.hasMore;\n    })[\"catch\"](function (error) {\n      console.error('Error loading images:', error);\n    })[\"finally\"](function () {\n      isLoading = false;\n      loadingSpinner.style.display = 'none';\n    });\n  }\n  function onScroll() {\n    if (mediaLibraryContent.scrollTop + mediaLibraryContent.clientHeight >= mediaLibraryContent.scrollHeight - 100) {\n      loadImages(searchQuery);\n    }\n  }\n  function handleSearchInput() {\n    searchQuery = searchInput.value;\n    page = 1;\n    mediaContainer.innerHTML = '';\n    loadImages(searchQuery);\n  }\n  if (searchInput) {\n    searchInput.addEventListener('input', function () {\n      issearch.value = 1;\n      handleSearchInput();\n    });\n  }\n  var clearSearchButton = document.getElementById('clear-search');\n  function toggleClearButtonVisibility() {\n    if (searchInput) {\n      if (searchInput.value.length > 0) {\n        clearSearchButton.classList.remove('d-none'); // Show the button\n      } else {\n        clearSearchButton.classList.add('d-none'); // Hide the button\n      }\n    }\n  }\n  if (searchInput) {\n    // Add event listener for input changes\n    searchInput.addEventListener('input', toggleClearButtonVisibility);\n  }\n  // Add event listener for clear button\n  if (clearSearchButton) {\n    clearSearchButton.addEventListener('click', function () {\n      searchInput.value = ''; // Clear the input field\n      toggleClearButtonVisibility(); // Update button visibility\n      page = 1; // Reset page number\n      searchQuery = ''; // Reset search query\n      isLoading = false;\n      hasMore = true;\n      issearch.value = 0;\n      mediaContainer.innerHTML = '';\n      loadImages(searchQuery);\n    });\n  }\n  // Initialize the visibility on page load\n  toggleClearButtonVisibility();\n  if (exampleModal) {\n    exampleModal.addEventListener('shown.bs.modal', function () {\n      if (mediaContainer.children.length === 0) {\n        loadImages(searchQuery); // Load images based on the search query if present\n      }\n      mediaLibraryContent.addEventListener('scroll', onScroll);\n    });\n    exampleModal.addEventListener('hidden.bs.modal', function () {\n      mediaLibraryContent.removeEventListener('scroll', onScroll);\n    });\n    if (mediaContainer.children.length === 0) {\n      loadImages(searchQuery);\n    }\n  }\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  var uploadButton = document.getElementById('nav-upload-files-tab');\n  var libraryButton = document.getElementById('nav-media-library-tab');\n  var searchContainer = document.getElementById('media-search-container');\n  if (libraryButton) {\n    // Function to toggle the search container visibility\n    var toggleSearchVisibility = function toggleSearchVisibility() {\n      if (libraryButton.classList.contains('active')) {\n        if (searchContainer) {\n          searchContainer.style.display = 'block';\n        }\n      } else {\n        if (searchContainer) {\n          searchContainer.style.display = 'none';\n        }\n      }\n    }; // Initial toggle based on the active tab\n    toggleSearchVisibility();\n\n    // Add event listeners to toggle the visibility on tab change\n    uploadButton.addEventListener('click', toggleSearchVisibility);\n    libraryButton.addEventListener('click', toggleSearchVisibility);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/media/media.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/media/media.js"]();
/******/ 	
/******/ })()
;